# Generated by Django 5.1.5 on 2025-01-21 19:36

from django.db import migrations
from tqdm import tqdm


def create_empty_dimension_rows(apps, schema_editor):
    SpackJobDataDimension = apps.get_model("core", "SpackJobDataDimension")
    GitlabJobDataDimension = apps.get_model("core", "GitlabJobDataDimension")
    JobResultDimension = apps.get_model("core", "JobResultDimension")
    JobRetryDimension = apps.get_model("core", "JobRetryDimension")

    SpackJobDataDimension.objects.create(stack="", job_size="", job_type="")
    GitlabJobDataDimension.objects.create(
        gitlab_runner_version="",
        ref="",
        tags=[],
        commit_id=None,
    )
    JobResultDimension.objects.create(
        status="",
        error_taxonomy=None,
        unnecessary=False,
        job_type="",
        gitlab_failure_reason="",
        job_exit_code=None,
    )
    JobRetryDimension.objects.create(
        is_retry=False,
        is_manual_retry=False,
        attempt_number=0,
        final_attempt=False,
    )


def reassign_job_fact_dimensions(apps, schema_editor):
    JobFact = apps.get_model("core", "JobFact")
    SpackJobDataDimension = apps.get_model("core", "SpackJobDataDimension")
    GitlabJobDataDimension = apps.get_model("core", "GitlabJobDataDimension")
    JobResultDimension = apps.get_model("core", "JobResultDimension")
    JobRetryDimension = apps.get_model("core", "JobRetryDimension")

    job_facts = JobFact.objects.iterator(chunk_size=10_000)
    total = JobFact.objects.count()
    for job_fact in tqdm(job_facts, total=total):
        job = job_fact.job

        # Update numerical data
        job.gitlab_after_script = job.gitlab_section_timers.get("after_script", 0)
        job.gitlab_cleanup_file_variables = job.gitlab_section_timers.get(
            "cleanup_file_variables", 0
        )
        job.gitlab_download_artifacts = job.gitlab_section_timers.get(
            "download_artifacts", 0
        )
        job.gitlab_get_sources = job.gitlab_section_timers.get("get_sources", 0)
        job.gitlab_prepare_executor = job.gitlab_section_timers.get(
            "prepare_executor", 0
        )
        job.gitlab_prepare_script = job.gitlab_section_timers.get("prepare_script", 0)
        job.gitlab_resolve_secrets = job.gitlab_section_timers.get("resolve_secrets", 0)
        job.gitlab_step_script = job.gitlab_section_timers.get("step_script", 0)
        job.gitlab_upload_artifacts_on_failure = job.gitlab_section_timers.get(
            "upload_artifacts_on_failure", 0
        )
        job.gitlab_upload_artifacts_on_success = job.gitlab_section_timers.get(
            "upload_artifacts_on_success", 0
        )

        # Get or create new dimensional rows
        spack_job_data, _ = SpackJobDataDimension.objects.get_or_create(
            job_size=job.job_size,
            stack=job.stack,
            job_type=job.job_type,
        )
        gitlab_job_data, _ = GitlabJobDataDimension.objects.get_or_create(
            gitlab_runner_version=job.gitlab_runner_version,
            ref=job.ref,
            tags=job.tags,
            commit_id=job.commit_id,
        )
        job_result, _ = JobResultDimension.objects.get_or_create(
            status=job.status,
            error_taxonomy=job.error_taxonomy,
            unnecessary=job.unnecessary,
            job_type=job.job_type,
            gitlab_failure_reason=job.gitlab_failure_reason,
            job_exit_code=job.job_exit_code,
        )
        job_retry_data, _ = JobRetryDimension.objects.get_or_create(
            is_retry=job.is_retry,
            is_manual_retry=job.is_manual_retry,
            attempt_number=job.attempt_number,
            final_attempt=job.final_attempt,
        )

        # Set new FK values
        job_fact.spack_job_data = spack_job_data
        job_fact.gitlab_job_data = gitlab_job_data
        job_fact.job_result = job_result
        job_fact.job_retry = job_retry_data

        # Set new values from old job data
        job_fact.job_url = job.job_url
        job_fact.name = job.name
        job_fact.pod_name = job.pod_name or ""

        job_fact.save()


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0004_new_dimensional_models"),
    ]

    operations = [
        migrations.RunPython(create_empty_dimension_rows, migrations.RunPython.noop),
        migrations.RunPython(reassign_job_fact_dimensions, migrations.RunPython.noop),
    ]
